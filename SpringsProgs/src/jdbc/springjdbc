Springs JDBC:
------------
- framework for db related code
- it is not a orm
- we need write the sql queries

problems of JDBC API
--------------------------
- lot of code before and after executing
 the query, such as creating connection,
  statement, closing resultset, connection etc.
- exception handling code on the database logic.
- handle transaction.
- boiler plate code
- we need statement + connection obj + resultset obj + Callablestatement etc...

Spring JDBC
-------------
-allows to clean-up the resources automatically, 
e.g. release the database connections.
- converts the standard JDBC SQLExceptions into
 RuntimeExceptions.
-JDBC template converts also the vendor 
 specific error messages into 
 better understandable error messages.



TABLE: EmployeeInfo 
COLUMNS: ID, NAME, SALARYINFO




Java setup:
-----------
1.create java project
2.download the jars for springs core + di + jdbc
3.provide springs.xml
4.Create a pojo class 
5.Provide EmployeeDAO.java  -> spring jdbc related code


EmployeeDao   -> JdbcTemplate -> DataSource -> db properties.
 
We need to write bean tags for EmployeeDao +  JdbcTemplate  +  DataSource 
 
-> for Create /update/read/delete db operations we need only jdbcTemplate object
 
  create/update/delete queries   --> update()
  read  --> query()

Read:
--------
SELECT QUERY
  
TWO approaches 
1.ResultSetExtractor  (interface) . method to override = extractData(ResultSet rs) 
2.RowMapper  (interface) .method to override = mapRow(ResultSet rs, int rowNo)


jdbcTemplate.query( <SQL QUERY> ,<data to query> , <object of RowMapper or object of ResultSetExtractor>)
  
  
choose anonymous inner class : create child class + override method + create object.
  
  
extractData() / mapRow() :---> convert row to java object uisng resultset.

 logic to convert row to java obj:
---------------------------------------
 int id = rs.getInt("ID");
 String myname = rs.getString("NAME");
 long sal = rs.getLong("SALARYINFO"); 
 Employee e   = new Employee (id,myname,sal);

 
steps:
---------- 
1.create obj for rowmapper or ResultsetExtractor
2.jdbcTemplate.query

 
 
 
 
 
 
  
      
 
Spring JDBC template offers several ways to query the database. 
-----------------------------------------------------------------
queryForList() returns a list of HashMaps. 
ResultSetExtractor or RowMapper - to translates the SQL result direct into an object 
(ResultSetExtractor) or a list of objects (RowMapper). 


1)	public int update(String query)	
is used to insert, update and delete records.

2)	public int update(String query,Object... args)
	is used to insert, update and delete records
	 using PreparedStatement using given arguments.

3)	public void execute(String query)	
is used to execute DDL query.

4)	public T execute(String sql, PreparedStatementCallback action)	
executes the query by using PreparedStatement callback.

5)	public T query(String sql, ResultSetExtractor rse)
	is used to fetch records using ResultSetExtractor.

6)	public List query(String sql, RowMapper rse)
	is used to fetch records using RowMapper.

Jar:
-------
spring-jdbc.jar 

usages
----------

extend JdbcDaoSupport

String SQL = "select count(*) from Student";
int rowCount = jdbcTemplateObject.queryForInt( SQL );

long rowCount = jdbcTemplateObject.queryForLong( SQL );

int age = jdbcTemplateObject.queryForInt(SQL, new Object[]{10});

String name = jdbcTemplateObject.queryForObject(SQL, new Object[]{10}, String.class);


String SQL = "select * from Student where id = ?";
Student student = jdbcTemplateObject.queryForObject(
   SQL, new Object[]{10}, new StudentMapper());

public class StudentMapper implements RowMapper<Student> {
   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {
      Student student = new Student();
      student.setID(rs.getInt("id"));
      student.setName(rs.getString("name"));
      student.setAge(rs.getInt("age"));
      
      return student;
   }
}



String SQL = "insert into Student (name, age) values (?, ?)";
jdbcTemplateObject.update( SQL, new Object[]{"Zara", 11} );


String SQL = "update Student set name = ? where id = ?";
jdbcTemplateObject.update( SQL, new Object[]{"Zara", 10} );

String SQL = "delete Student where id = ?";
jdbcTemplateObject.update( SQL, new Object[]{20} );


String SQL = "CREATE TABLE Student( " +
   "ID   INT NOT NULL AUTO_INCREMENT, " +
   "NAME VARCHAR(20) NOT NULL, " +
   "AGE  INT NOT NULL, " +
   "PRIMARY KEY (ID));"

jdbcTemplateObject.execute( SQL );



