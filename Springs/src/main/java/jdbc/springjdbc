Springs JDBC:[for database connectivity ] 
------------
- framework for db related code
- Unlike Hibernate it is not a orm
- we need write the sql queries

problems of JDBC API
--------------------------
- lot of code before and after executing  the query, such as creating connection,
  statement, closing resultset, connection etc.
- exception handling is mandatory on the database logic.
- handle transaction.
- boiler plate code [code repeation]
- we need statement + connection obj + resultset obj + Callablestatement etc...

Spring JDBC
-------------
-allows to clean-up the resources automatically, 
e.g. release the database connections.
- converts the standard JDBC SQLExceptions into  RuntimeExceptions.
 -exception handling is optional
-JDBC template converts also the vendor  specific error messages into  better understandable error messages.
 - need only the jdbctemplate obj

- has inbuilt methods for mapping rows to the java layer.

TABLE: EmployeeInfo 

COLUMNS: 
ID- Number, 
NAME- varchar,
SALARYINFO - Number

 
Java setup:
-----------
1.create java project
2.download and import  jars for springs core + di + jdbc
or add maven dependency
<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.0.8.RELEASE</version>
</dependency>

3.provide springs.xml
4.Create a pojo class  for the EmployeeInfo
5.Provide EmployeeDAO.java -> spring jdbc related code


For working with spring jdbc we need JdbcTemplate object.

EmployeeDao - dao class that contains the java code for table CRUD opeartions.
EmployeeDao requires JdbcTemplate object
JdbcTemplate object requires DataSource object
DataSource requires  db properties.

EmployeeDao   -> JdbcTemplate -> DataSource -> db properties.

We need to write bean tags for  EmployeeDao +  JdbcTemplate  +  DataSource 
 
Methods:
------------

1.create/update/delete queries   --> JdbcTemplateObj.update("<query>","<data to the query>")

2.read  -->  JdbcTemplateObj.query("<query>","<data to the query>",<rowmapper obj or resultset extractor obj>)   



Read:
--------

Multiple Columns : [single/multiple rows]
----------------------------------------------


 
  
TWO approaches 
1.ResultSetExtractor  (interface) . method to override = extractData(ResultSet rs) 
2.RowMapper  (interface) .method to override = mapRow(ResultSet rs, int rowNo)

For executing queries:
jdbcTemplate.query( <SQL QUERY> ,<data to query> , <object of RowMapper or object of ResultSetExtractor>)
  
  
choose anonymous inner class : create child class + override method + create object.

 Logic to be written:
 --------------------------
 extractData() / mapRow() :---> convert row to java object using resultset.


 logic to convert row to java obj:
 i/p: resultset obj [is provided by jdbc]
---------------------------------------
 int id = rs.getInt("ID");
 String myname = rs.getString("NAME");
 long sal = rs.getLong("SALARYINFO"); 
 Employee e   = new Employee (id,myname,sal);



steps:
---------- 
1.create obj for rowmapper or ResultsetExtractor
2.jdbcTemplate.query

 
 
Spring JDBC template offers several ways to query the database. 
-----------------------------------------------------------------
queryForList() returns a list of HashMaps. 
ResultSetExtractor or RowMapper - to translates the SQL result direct into an object 
(ResultSetExtractor) or a list of objects (RowMapper). 


1)	public int update(String query)	
is used to insert, update and delete records.

2)	public int update(String query,Object... args)
	is used to insert, update and delete records
	 using PreparedStatement using given arguments.

3)	public void execute(String query)	
is used to execute DDL query.

4)	public T execute(String sql, PreparedStatementCallback action)	
executes the query by using PreparedStatement callback.

5)	public T query(String sql, ResultSetExtractor rse)
	is used to fetch records using ResultSetExtractor.

6)	public List query(String sql, RowMapper rse)
	is used to fetch records using RowMapper.

Jar:
-------
spring-jdbc.jar 

 
