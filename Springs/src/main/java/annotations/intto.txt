/Annotations:
--------------
Dev will specify the config using annotations..
  
 
 In springs config can be done using
- xml
- annotations
 
 Where do we need to write the annotations?
 Inside the bean class
 
  

Annotations for the Bean classes: (write these annotations before class name) 
=======================================================================================
@Component  -> Controller / Service/ DAO /Helper
@Controller    -> Controller class
@Service       -> Service class
@Repository    -> DAO class


@Component,
	@Component is a generic stereotype for any Spring-managed component. 
@Repository, @Service, and @Controller are specializations of @Component for 
	more specific use cases, for example, in the persistence, service, and presentation layers, respectively

Use the annotations before the class name:
============================================================
@Component  -> Controller / Service/ DAO /Helper
@Controller    -> Controller class
@Service       -> Service class
@Repository    -> DAO class

ProductController.java:
---------------------------
using xml:
<bean id ="pControl" class="ProductController" />

using annotatoions:
@Controller("pControl")// pControl is the bean id
public class ProductController{
                                            
}


ProductService.java
---------------------
using xml:
<bean id ="pService" class="ProductService" />
    
using annotatoions:    
@Service("pService")// pServie is the bean id
public class ProductService{               
                                          
}


ProductDAO.java:
-------------------------------------------
using xml:
<bean id ="pDAO" class="ProduuctDAO" />

    
using annotatoions:      
@Repository("pDAO")// pDAO is the bean id 
public class ProduuctDAO{
                                          
  
}


ProductHelper.java:
--------------------------
using xml:
<bean id ="pHelper" class="ProductHelper" />
    
using annotations:
@Component("pHelper")// pHelper is the bean id 
public class ProductHelper{
                                          
  
}

 
  
Annotations for resolving dependencies:
=========================================
(before instance variables / before constr / before setter method)  


@Autowired   -> autowire By Type
@Resource  -> autowire by name
[replacement for property tag/constr-arg ]



ex1:
ProductController has ProductService as dependency
using xml:
-----------------------------------------------------------------------------
ProductService.java
public class ProductService{
                                            
 
}

ProductController.java:
public class ProductController{
  ProductService service;  
  //setters 
                                                                                      
}


xml:
 <bean id ="pService" class="ProductService" >
  </bean>
  

 <bean id ="pControl" class="ProductController" >
 <property name="service"  ref="pService" />
  </bean>
  
or
 <bean id ="pControl" class="ProductController" autowire="ByType">
  </bean>

or 
 <bean id ="pControl" class="ProductController" autowire="ByName">
  </bean>


using annotations use @Autowired for resolving dependecny using class name:
-----------------------------------------------------------------------------------------------
@Controller("pControl")// pControl is the bean id for ProductService
public class ProductController{
                                            
 @Autowired // this annotation will resolve the dependency using the class name
 ProductService service;                                            
                                                                                      
}

 
@Controller("pService")// pServcie is the bean id for ProductService
public class ProductService{
                                            
 
}
  


using annotations use @Resource for resolving dependency using bean id
-----------------------------------------------------------------------------------------------
@Controller("pControl")// pControl is the bean id for ProductService
public class ProductController{
                                            
@Resource(name="pService") // this annotation will resolve the dependency. , resolve the dependency using the bena id
ProductService myserv;                                            
                                                                                      
}

@Controller("pService") // pServcie is the bean id for ProductService
public class ProductService{
                                            
 
}
  
   


Provide configuration class:
----------------------------------
@Configuration - 
  the class can be used by the Spring IoC container as a source of bean definitions. 
      
@Configuration
@ComponentScan(basePackages={"mypackage1","service"}) // springs wil scan only two packages "mypackage1","service" for beans
public class ApplicationConfig {
 
}
  


How to get bean obj:-
==========================
 AbstractApplicationContext context = new AnnotationConfigApplicationContext(ApplicationConfig.class);
		//approach1
		ProductController application = (ProductController) context.getBean("pControl");
		//approach2
		ProductController application1 = (ProductController) context.getBean(ProductController.class);
		



pacakge annotations.autowire


1. create config class
2. create bean classes using 
@Controller    -> Controller class
@Service       -> Service class
@Repository    -> DAO class
  
@Component  -> Controller / Service/ DAO /Helper

and resolve the dependency using
@Autowired   -> autowire By Type
@Resource  -> autowire by name
[replacement for property tag/constr-arg ]

3.craete main class






@Bean  - annotation tells Spring that a 
method annotated with @Bean will
 return an object that should be registered as a bean 
life cycle 
:(initMethod = "init", destroyMethod = "cleanup" )
@Scope - bean scope

	- how to specify scope , init method , destroy method in nannotations
	- inject the object on run time 
	- using annotation how to injevct primitive data types.
	
