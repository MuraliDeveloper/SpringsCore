Spring MVC helps in building flexible 
and loosely coupled web applications. 

The Model-view-controller design pattern
 helps in seperating the 
business logic, presentation logic 
and navigation logic.

DispatcherServlet
-----------------
 - DispatcherServlet first receives the request.
 - DispatcherServlet consults the HandlerMapping and 
 invokes the Controller associated with the request.
 - Controller process the request by calling the 
 appropriate service methods and returns a 
 ModeAndView object to the DispatcherServlet. 
 The ModeAndView object contains the model data 
 and the view name.
 - DispatcherServlet sends the view name to a 
 ViewResolver to
  find the actual View to invoke.
 -  DispatcherServlet will pass the model object 
 to the View to render the result.
- View with the help of the model data will 
render the result back to the user.

view resolver config:
------------------------
<bean id="viewResolver"
class=" org.springframework.web.servlet.view.InternalResourceViewResolver" >
    <property name="prefix">
        <value>/WEB-INF/jsp/</value>
    </property>
    <property name="suffix">
        <value>.jsp</value>
    </property>
</bean>


@Controller annotation
 is used to mark the class as the
  controller in Spring 3.

@RequestMapping annotation 
is used to map the request url.


controller class:
----------------
import org.springframework.stereotype.Controller;  
import org.springframework.web.bind.annotation.RequestMapping;  
import org.springframework.web.servlet.ModelAndView;  
@Controller  
public class HelloWorldController {  
    @RequestMapping("/hello")  
    public ModelAndView helloWorld() {  
        String message = "HELLO SPRING MVC HOW R U";  
        return new ModelAndView("hellopage", "message", message);  
    }  
    
    @RequestMapping(value = "/", method = RequestMethod.GET)
	public String printWelcome(ModelMap model) {

		model.addAttribute("message", "Spring 3 MVC Hello World");
		return "hello";

	}

	@RequestMapping(value = "/hello/{name:.+}", method = RequestMethod.GET)
	public ModelAndView hello(@PathVariable("name") String name) {

		ModelAndView model = new ModelAndView();
		model.setViewName("hello");
		model.addObject("msg", name);

		return model;

	}
}  
