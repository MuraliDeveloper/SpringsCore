
Disadv:
----------------
it's repetitive and error prone
any error can have a very high impact
errors are hard to debug and reproduce
this decreases the readability of the code base
What if this method calls another transactional method or this method is called by other transactn?


Using Spring @Transactional
---------------------------
only public methods should be annotated with @Transactional 

@Transactional
public void businessLogic() {
... use entity manager inside a transaction ...
}

attributes:
------------------
the Propagation Type of the transaction ex: @Transactional(propagation=Propagation.REQUIRED)
the Isolation Level of the transaction
a Timeout for the operation wrapped by the transaction
a readOnly flag – a hint for the persistence provider that the transaction should be read only ..ex: @Transactional(timeout=60)
the Rollback rules for the transaction


Isolation Level
----------------------
@Transactional(isolation = Isolation.SERIALIZABLE)

Isolation level defines a contract between transactions.
Read Uncommitted – Allows dirty reads, when a transaction is not yet committed by a thread and another thread is reading the dirty data.
Read Committed – Does not allow dirty reads. Only lets a thread to read values which have already been committed by other running transactions in another threads.
Repeatable Read – If the same data is read twice in the same transaction, it will always be the same. 
This level guarantees that any data once read cannot change.
Serializable – Transactions occur with locking at all levels (read, range and write locking), 
because of which they are executed in a fixed sequence. It doesn’t allow concurrent transactions and leads to a performance hit.


@Transactional (isolation=Isolation.READ_COMMITTED)
---------------------------------------------------------

The default is Isolation.DEFAULT
Most of the times, you will use default unless and until you have specific requirements.
Informs the transaction (tx) manager that the following isolation level should be used for the current tx. Should be set at the point from where the tx starts because we cannot change the isolation level after starting a tx.
DEFAULT

Use the default isolation level of the underlying database.

READ_COMMITTED
A constant indicating that dirty reads are prevented; non-repeatable reads and phantom reads can occur.

READ_UNCOMMITTED
This isolation level states that a transaction may read data that is still uncommitted by other transactions.

REPEATABLE_READ
A constant indicating that dirty reads and non-repeatable reads are prevented; phantom reads can occur.

SERIALIZABLE
A constant indicating that dirty reads, non-repeatable reads, and phantom reads are prevented.


@Transactional(propagation=Propagation.REQUIRED)
-----------------------------------------------------

If not specified, the default propagational behavior is REQUIRED. 

Other options are REQUIRES_NEW, MANDATORY, SUPPORTS, NOT_SUPPORTED, NEVER, and NESTED.

REQUIRED
Indicates that the target method can not run without an active tx. If a tx has already been started before the invocation of this method, then it will continue in the same tx or a new tx would begin soon as this method is called.    

REQUIRES_NEW
Indicates that a new tx has to start every time the target method is called. If already a tx is going on, it will be suspended before starting a new one.

MANDATORY
Indicates that the target method requires an active tx to be running. 
If a tx is not going on, it will fail by throwing an exception.

SUPPORTS
Indicates that the target method can execute irrespective of a tx. If a tx is running, it will participate in the same tx. If executed without a tx it will still execute if no errors.
Methods which fetch data are the best candidates for this option.

NOT_SUPPORTED
Indicates that the target method doesn’t require the transaction context to be propagated.
Mostly those methods which run in a transaction but perform in-memory operations are the best candidates for this option.

NEVER
Indicates that the target method will raise an exception if executed in a transactional process.


--
1. @Transactional annotation in a Spring based application, 
we need to first enable annotations in our Spring application by adding the 
needed configuration into 
spring context file 
<tx:annotation-driven transaction-manager="txManager"/>



2. define the transaction manager bean, with the same name as specified in 
the above transaction-manager attribute value.


<bean id="txManager"     class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref= "datasource" />
</bean>

or

<bean id="txManager"
        class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property name="sessionFactory" ref= "sessionFactory" />
</bean>

or

<bean id="txManager"
        class="org.springframework.orm.jpa.JpaTransactionManager">
    <property name="entityManagerFactory" ref="entityManagerFactory" />
</bean>


3.

@Transactional(value = "myTransactionManager", propagation = Propagation.REQUIRED, readOnly = true)
public void myMethod() {

}


Ex:
------------
@Transactional
public void transferMoney(Account to, Account from, int amount) throws Exception {
    debiFromAccount(from, amount)
    creditToAccount(to, amount);
}
public debitFromAccount(Account from, int amount) {
    //do staff and debited money from data base
}
public creditToAccount(Account to, int amount) throws Exception {
    //do straff
    throw new Exception("Error during credit");
}

@Transactional only rolls back transactions for unchecked exceptions. 
For checked exceptions and their subclasses, it commits data.

so use : @Transactional(rollbackFor = Exception.class)
@Transactional (noRollbackFor=IllegalStateException.class)



where:
----------
@Transactional: Service or DAO Layer?

The Service is the best place for putting @Transactional, service layer should hold the detail-level use case behavior for a user interaction that would logically go in a transaction.
