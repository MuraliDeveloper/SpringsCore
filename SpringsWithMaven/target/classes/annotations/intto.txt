/Annotations:
--------------
Dev will specify the config using annotations..
  
  
@Configuration
@ComponentScan(basePackages={"mypackage1","service"})
public class ApplicationConfig {
 
}
  

Annotations for the Bean classes: (write these annotations before class name) 
=======================================================================================
@Controller    -> Controller class
@Service       -> Service class
@Repository    -> DAO class
  
@Component  -> Controller / Service/ DAO /Helper

syntax:
@Controller("pControl")
public class ProductController{
                                             <bean id ="pControl" class="ProductController" />
  
}


@Service("pService")
public class ProductService{               
                                            <bean id ="pService" class="ProductService" />
  
}

@Repository("pDAO")
public class ProduuctDAO{
                                            <bean id ="pDAO" class="ProduuctDAO" />
  
}


  
Annotations for resolving dependencies:
=========================================
(before instance variables / before constr / before setter method)  
@Autowired   -> autowire By Type
@Resource  -> autowire by name
[replacement for property tag/constr-arg ]


@Controller("pControl")
public class ProductController{
                                             <bean id ="pControl" class="ProductController" >
   @Autowired
   ProductService myserv;                                            
                                              </bean>
   @Resource(name="pService")
   ProductService myserv;
                                                
  
}


How to get bean obj:-
  ==========================
  
  
  AbstractApplicationContext context = new AnnotationConfigApplicationContext(ApplicationConfig.class);
		//approach1
		ProductController application = (ProductController) context.getBean("pControl");
		//approach2
		ProductController application1 = (ProductController) context.getBean(ProductController.class);
		

