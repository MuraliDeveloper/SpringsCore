@Configuration - 
 that the class can be used by the Spring
  IoC container as a source of bean definitions. 

@Bean  - annotation tells Spring that a 
method annotated with @Bean will
 return an object that should be registered as a bean 
life cycle 
:(initMethod = "init", destroyMethod = "cleanup" )
@Scope - bean scope


@Component,
	@Component is a generic stereotype for any Spring-managed component. 
@Repository 
@Service
	@Repository, @Service, and @Controller are specializations of @Component for 
	more specific use cases, for example, in the persistence, service, and presentation layers, respectively

	- how to specify scope , init method , destroy method in nannotations
	- inject the object on run time 
	- using annotation how to injevct primitive data types.
	
	
	

@Autowired
- Autowiring optional with attribute required=”false”
	@Autowire by default is a type driven injection.
	 @Qualifier spring annotation can be used to further fine-tune autowiring.
	@Resource (javax.annotation.Resource) annotation can be used for wiring by name.


@Resource annotation marks a resource that is needed by the application. 
It is analogous to @Autowired in that both injects beans by type when no attribute provided. 
But with name attribute, @Resource allows you to inject a bean by it’s name, 
which @Autowired does not.


@Controller
Annotate your controller classes with @Controller.


@RequestMapping
 @RequestMapping spring annotation to map URLs onto an entire class or a particular handler method

















@Autowired	Constructor, Field, Method	Declares a constructor, field, setter method, or configuration method to be autowired by type. Items annotated with @Autowired do not have to be public.

@Configurable	Type	Used with <context:springconfigured> to declare types whose properties should be injected, even if they are not instantiated by Spring. Typically used to inject the properties of domain objects.

@Order	Type, Method, Field	Defines ordering, as an alternative to implementing the org. springframework.core.Ordered interface.

@Qualifier	Field, Parameter, Type, Annotation Type	Guides autowiring to be performed by means other than by type.
To resolve any autowiring ambiguity, use the @Qualifier attribute with @Autowired.


@Required	Method (setters)	Specifies that a particular property must be injected or else the configuration will fail.
 Spring will throw a BeanInitializationException and context creation will fail.

@Scope	Type	Specifies the scope of a bean, either singleton, prototype, request, session, or some custom scope.