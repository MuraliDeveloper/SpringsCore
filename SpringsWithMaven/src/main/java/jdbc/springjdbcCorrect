Get count no of employee:
--------------------------
String SQL = "select count(*) from Employee";
int rowCount = jdbcTemplateObject.queryForInt( SQL );

Get bigger count no of employee:
--------------------------
String SQL = "select count(*) from Employee";
long rowCount = jdbcTemplateObject.queryForLong( SQL );


Get the age of employee whose id =25:
----------------------------------------
String SQL = "select age from Employee where id = ?";
int age = jdbcTemplateObject.queryForInt
(SQL, new Object[]{25});



Get the name of employee whose id =25:
----------------------------------------
String SQL = "select name from Employee where id = ?";
String name = jdbcTemplateObject.queryForObject
(SQL, new Object[]{25}, String.class);

Get the name of employee whose id =25:
----------------------------------------
String name = jdbcTemplateObject.queryForObject("select name from Employee where id = ?", new Object[]{1000}, String.class);


Get salary of employee using emp id
-----------------------------------------
 Float salary = jdbcTemplate.queryForObject("select salary from employee where id=?", new Object[]{5000},Float.class);


#GET ALL EMPS WHO ARE WORKING FOR HR Dept
----------------------------------------------
long deptCount = jdbcTemplate.queryForLong
("select count(*) from employee where dept=?", new Object[]{"HR"});
	 
#GET ALL EMPS WHO ARE WORKING in "hyd"
---------------------------------------------
long cityCount = jdbcTemplate.queryForLong
	  ("select count(*) from employee where city=?", new Object[]{"bangalore"});


Get all the employee names:
--------------------------------
List<String> names = jdbcTemplate.queryForList("select name from employee", new Object[]{},String.class);

Get all the employee names in hr dept:
--------------------------------
List<String> names = jdbcTemplate.queryForList("select name from employee where dept=?", new Object[]{"HR"}, String.class);
	  
Get all sals from employee:
----------------------------------
List<Long> sals = jdbcTemplate.queryForList"select sal from employee",Long.class);
	  
Get all empIds:
-------------------  	  
List<Integer> ids =	  jdbcTemplate.queryForList("select id from employeeinfo" , Integer.class);
	 

Get the names of all employees matching  with 'kumar' 
--------------------------------------------------
List<String> list =jdbcTemplateObject.queryForList("Select name from Employee Where name like ?", String.class,  "%kumar%");
 
 
Get all the dept names  from dept table 
--------------------------------------------------
List<String> list = jdbcTemplateObject.queryForList("Select d.dept_name from Department d ", String.class);
  
  
Update employee name using emp id:
-------------------------------------
String query="update employee set name=? where id=?";  
int updatedRows = jdbcTemplateObject.update (query,"shyam",1000); 

Get all empNo, EmpName from Employee table:
 ------------------------------------------------
  public List<Map<String, Object>> queryForList_ListMap() {
         String sql = "Select e.Emp_No, e.Emp_Name from Employee e ";
         List<Map<String, Object>> list = 
         jdbcTemplateObject.queryForList(sql);
         return list;
 }
	


Get deptname by deptID:
-------------------------------	
public String getDeptNameById(Long deptId) {
         String sql = "Select d.Dept_Name
          from Department d 
        			Where d.Dept_Id = ?";
            String deptName = 
             jdbcTemplateObject.
             queryForObject(sql, 
             String.class, new Object[] { deptId });
            return deptName;
}


Spring with ORM Frameworks
Advantage of Spring with ORM
Spring provides API to easily integrate Spring with ORM frameworks such as Hibernate, JPA(Java Persistence API), JDO(Java Data Objects), Oracle Toplink and iBATIS.

Advantage of ORM Frameworks with Spring

There are a lot of advantage of Spring framework in respect to ORM frameworks. There are as follows:

Less coding is required: By the help of Spring framework, you don't need to write extra codes before and after the actual database logic such as getting the connection, starting transaction, commiting transaction, closing connection etc.
Easy to test: Spring's IoC approach makes it easy to test the application.
Better exception handling: Spring framework provides its own API for exception handling with ORM framework.
Integrated transaction management: By the help of Spring framework, we can wrap our mapping code with an explicit template wrapper class or AOP style method interceptor.


https://examples.javacodegeeks.com/enterprise-java/spring/jdbc/spring-transaction-management-example-with-jdbc-example/




 

