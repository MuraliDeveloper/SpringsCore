Setter injection examples:
--------------------------------
  
1. AccountService has String as dependency.
  Spring has to create obj for AccountService and resolve the dependency.
  public class AccountService {

	private String dbName;

    public void save(){
		System.out.println("account- save using"+dbName);
	}
    ................
  }




package setterInject1;


public class AccountService {

	private String dbName;

	public String getDbName() {
		return dbName;
	}

	public void setDbName(String dbName) {
		this.dbName = dbName;
	}
	
	public void connect(){
		System.out.println("connecting db with user:"+dbName);
	}
	 
	
	public void save(){
		System.out.println("account- save using"+dbName);
	}
}


public class UserService {

	private String userName;
	private String pass;

	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}


	public String getPass() {
		return pass;
	}


	public void setPass(String pass) {
		this.pass = pass;
	}


	public void process() {
		System.out.println(
			"processing user ... with userName=" + userName
				+ "  , pass=" + pass);
	}

}


springs.xml
--------------------------------

 <beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">
 

<bean id="uService" 
	class="setterInject1.UserService">
	 	<property name="userName" value="system" />
	 	<property name="pass" value="admin@" />
	</bean>


	<bean id="aService" 
	   class="setterInject1.AccountService">
	 	<property name="dbName" value="oracle" />  
	</bean>


</beans>


public class TestUser {

	public static void main(String[] args) {
		ApplicationContext context = 
				new ClassPathXmlApplicationContext
				("file:src/setterInject1/springs.xml");
		
		UserService service = (UserService)
				context.getBean("uService");
		
		service.process();
		
	}

}
