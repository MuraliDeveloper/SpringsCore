AOP
------------
to modularize cross-cutting concerns in aspects. 
it’s an interceptor to intercept some processes,
ex:, method  executution , Spring AOP can hijack the executing method,
 and add extra functionality before or after the method execution.
:
– Logging and Tracing
– Transaction Management
– Security
– Caching
– Error Handling
– Performance Monitoring
– Custom Business Rules


5 type of advices are supported :
--------------------------------------------------------
1.before

Run advice before the a method execution.

2	
after

Run advice after the method execution, regardless of its outcome.

3	
after-returning

Run advice after the a method execution only if method completes successfully.

4	
after-throwing

Run advice after the a method execution only if method exits by throwing an exception.

5	
around

Run advice before and after the advised method is invoked.




1. Before advice – Run before the method execution
  interface : MethodBeforeAdvice
2.After returning advice – Run after the method returns a result
  AfterReturningAdvice
3. After throwing advice – Run after the method throws an exception
  ThrowsAdvice 
4. Around advice – Run around the method execution, combine all three advices above.
  MethodInterceptor 
 5. After advice: Advice to be executed regardless of the means by which a join point exits 
  (normal or exceptional return).

Lib:
------------
<dependency>
	<groupId>cglib</groupId>
	<artifactId>cglib</artifactId>
	<version>2.2.2</version>
</dependency>
 
 